name: Deploy Resilient API to AWS

on:
  push:
    branches:
      - main
      - feature/add_franchies_and_sucursal

env:
  AWS_REGION: us-east-1
  ECR_REPO: resilient-api
  CLUSTER_NAME: resilient-api-cluster
  SERVICE_NAME: resilient-api-service
  TASK_FAMILY: resilient-api-task
  IMAGE_TAG: latest


jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout del repo
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2.1. Configurar JDK 17 para Gradle Build
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 2.2. Actualizar archivo gradlew

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew


      # 3. Cache Gradle
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build app with Gradle
        run: ./gradlew clean build -x test

      # 4. Configurar credenciales AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 5. Login en Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 6. Build & Push Docker image
      - name: Build, Tag, and Push Docker image
        run: |
          ECR_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}
          echo "Building image: $ECR_URI"
          docker build -t $ECR_URI .
          docker push $ECR_URI
          echo "ECR_URI=$ECR_URI" >> $GITHUB_ENV   # <- Para usar en pasos siguientes


      # 7. Actualizar ECS Task Definition
      - name: Update ECS Task Definition
        run: |
          TASK_DEF=$(aws ecs describe-task-definition \
            --task-definition ${{ env.TASK_FAMILY }} \
            --region ${{ env.AWS_REGION }} \
            | jq '.taskDefinition')

          NEW_TASK_DEF=$(echo $TASK_DEF | jq --arg IMAGE "$ECR_URI" \
            '.containerDefinitions[0].image=$IMAGE
             | {family, taskRoleArn, executionRoleArn, networkMode, containerDefinitions, volumes, placementConstraints, requiresCompatibilities, cpu, memory}')

          echo $NEW_TASK_DEF > new-task-def.json

          aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --region ${{ env.AWS_REGION }}



      # 8. Forzar nuevo despliegue en ECS
      - name: Force new ECS deployment
        run: |
          aws ecs update-service \
            --cluster ${{ env.CLUSTER_NAME }} \
            --service ${{ env.SERVICE_NAME }} \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      # 9. Obtener la URL del ALB
      - name: Get ALB URL
        id: get-alb
        run: |
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names resilient-api-alb \
            --query "LoadBalancers[0].DNSName" \
            --output text \
            --region ${{ env.AWS_REGION }})
          echo "ALB_URL=http://$ALB_DNS" >> $GITHUB_ENV
          echo "ALB_URL=http://$ALB_DNS"

      # 10. Mostrar URL como output del job
      - name: Set output
        run: |
          echo "url=$ALB_URL" >> $GITHUB_OUTPUT
